{
  "openapi": "3.1.0",
  "info": {
    "title": "Lexicon Labs API",
    "description": "API for homework submission, AI-powered review, and real-time chat conversations",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.lexiconlabs.ai",
      "description": "Homework API Server"
    },
    {
      "url": "http://localhost:8000",
      "description": "Chat API Server"
    }
  ],
  "security": [
    {
      "apiKeyHeader": []
    }
  ],
  "paths": {
    "/v1/homeworks": {
      "get": {
        "description": "Get all homework assignments",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of assignments to return per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip before starting to collect results",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "teacherId",
            "in": "query",
            "description": "Filter assignments by teacher UUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "courseId",
            "in": "query",
            "description": "Filter assignments by course ID(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter assignments",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all assignments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeworkAssignmentPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Processing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/homeworks/{homeworkId}/submissions": {
      "post": {
        "description": "Upload homework files for AI review",
        "parameters": [
          {
            "name": "homeworkId",
            "in": "path",
            "required": true,
            "description": "UUID of the homework assignment being submitted",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["studentId", "files"],
                "properties": {
                  "studentId": {
                    "type": "string",
                    "description": "The ID of the student submitting the homework"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "The files containing the student's homework solution (max 10 files)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Homework submission created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeworkSubmission"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Homework not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Processing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chats/": {
      "post": {
        "description": "Create a new chat session",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["user_id"],
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user creating the chat session"
                  },
                  "title": {
                    "type": "string",
                    "description": "Optional custom title for the chat"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Optional metadata object"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Chat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chats/user/{user_id}": {
      "get": {
        "description": "List all chats for a specific user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "The ID of the user whose chats to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to skip",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of chats to return",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by creation date",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user chats",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chats/{chat_id}": {
      "get": {
        "description": "Get specific chat details",
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the chat",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a chat session and all its messages",
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the chat to delete",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Chat has active connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chats/{chat_id}/messages": {
      "get": {
        "description": "Get paginated messages from a chat",
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the chat",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of messages to skip",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of messages to return",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by creation time",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of chat messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HomeworkAssignmentPage": {
        "type": "object",
        "required": [
          "prevPage",
          "nextPage",
          "data"
        ],
        "properties": {
          "prevPage": {
            "type": "boolean",
            "description": "Indicates if there's a previous page of results"
          },
          "nextPage": {
            "type": "boolean",
            "description": "Indicates if there's a next page of results"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HomeworkAssignment"
            },
            "description": "Array of homework assignment objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of assignments matching the query"
          }
        }
      },
      "HomeworkAssignment": {
        "type": "object",
        "required": [
          "id",
          "tenantId",
          "teacherId",
          "assignmentId",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the homework assignment"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "teacherId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the teacher who created the assignment"
          },
          "assignmentId": {
            "type": "string",
            "description": "Unique assignment identifier"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the homework assignment"
          },
          "courseId": {
            "type": "string",
            "description": "ID of the course this homework belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the assignment was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the assignment was last updated"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "File identifier"
                },
                "fileName": {
                  "type": "string",
                  "description": "Name of the file"
                }
              }
            },
            "description": "Array of files associated with the homework assignment"
          },
          "submissions": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Array of student submissions for this homework assignment"
          }
        }
      },
      "HomeworkSubmission": {
        "type": "object",
        "required": [
          "id",
          "homeworkId",
          "chatId",
          "status",
          "chatIframeUrl",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the submission"
          },
          "homeworkId": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the homework being submitted"
          },
          "chatId": {
            "type": "string",
            "description": "The ID of the chat session created for this submission review"
          },
          "status": {
            "type": "string",
            "description": "The current status of the submission",
            "enum": ["submitted", "reviewed", "approved", "needs_revision"]
          },
          "chatIframeUrl": {
            "type": "string",
            "description": "URL for the chat interface"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the submission was created"
          },
          "analysis": {
            "type": "string",
            "description": "AI analysis of the submission"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Chat": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "tenant_id",
          "title",
          "config",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the chat session"
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user who owns this chat"
          },
          "tenant_id": {
            "type": "string",
            "description": "The tenant identifier"
          },
          "title": {
            "type": "string",
            "description": "The title of the chat session"
          },
          "config": {
            "type": "object",
            "description": "Configuration object containing metadata and chat settings"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the chat was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the chat was last updated"
          },
          "last_message_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of the last message in this chat"
          },
          "message_count": {
            "type": "integer",
            "description": "Total number of messages in this chat"
          },
          "status": {
            "type": "string",
            "description": "Current status of the chat"
          }
        }
      },
      "ChatListResponse": {
        "type": "object",
        "required": [
          "chats",
          "total",
          "offset",
          "limit",
          "has_more"
        ],
        "properties": {
          "chats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Chat"
            },
            "description": "Array of chat objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of chats for this user"
          },
          "offset": {
            "type": "integer",
            "description": "Current offset value used for pagination"
          },
          "limit": {
            "type": "integer",
            "description": "Current limit value used for pagination"
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates if there are more chats available"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "id",
          "content",
          "sender_role",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the message"
          },
          "content": {
            "type": "string",
            "description": "The text content of the message"
          },
          "sender_role": {
            "type": "string",
            "enum": ["user", "assistant"],
            "description": "Role of the message sender"
          },
          "media_type": {
            "type": "string",
            "nullable": true,
            "description": "Type of media attachment, if any"
          },
          "media_url": {
            "type": "string",
            "nullable": true,
            "description": "URL to the media attachment, if any"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the message was created"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata associated with the message"
          }
        }
      },
      "MessageListResponse": {
        "type": "object",
        "required": [
          "messages",
          "total",
          "offset",
          "limit",
          "has_more"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "Array of message objects from the chat"
          },
          "total": {
            "type": "integer",
            "description": "Total number of messages in this chat"
          },
          "offset": {
            "type": "integer",
            "description": "Current offset value used for pagination"
          },
          "limit": {
            "type": "integer",
            "description": "Current limit value used for pagination"
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates if there are more messages available"
          }
        }
      },
      "DeleteResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "deleted_at"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the deletion was successful"
          },
          "message": {
            "type": "string",
            "description": "Confirmation message about the deletion"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the chat was deleted"
          }
        }
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "x-tenant-api-secret"
      },
      "chatApiKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  }
}